.Dd March 30, 2013
.Dt ewfacquire
.Os libewf
.Sh NAME
.Nm ewfacquire
.Nd acquires data in the EWF format
.Sh SYNOPSIS
.Nm ewfacquire
.Op Fl A Ar codepage
.Op Fl b Ar number_of_sectors
.Op Fl B Ar number_of_bytes
.Op Fl c Ar compression_values
.Op Fl C Ar case_number
.Op Fl d Ar digest_type
.Op Fl D Ar description
.Op Fl e Ar examiner_name
.Op Fl E Ar evidence_number
.Op Fl f Ar format
.Op Fl g Ar number_of_sectors
.Op Fl l Ar log_filename
.Op Fl m Ar media_type
.Op Fl M Ar media_flags
.Op Fl N Ar notes
.Op Fl o Ar offset
.Op Fl p Ar process_buffer_size
.Op Fl P Ar bytes_per_sector
.Op Fl r Ar read_error_retries
.Op Fl S Ar segment_file_size
.Op Fl t Ar target
.Op Fl T Ar toc_file
.Op Fl 2 Ar secondary_target
.Op Fl hqRsuvVw
.Ar source
.Sh DESCRIPTION
.Nm ewfacquire
is a utility to acquire media data from a
.Ar source
and store it in EWF format (Expert Witness Compression Format).
.Nm ewfacquire
acquires media data in a format equivalent to EnCase and FTK imager, including meta data. Under Linux, FreeBSD, NetBSD, OpenBSD, MacOS\-X/Darwin
.Nm ewfacquire
supports reading directly from device files. On other platforms
.Nm ewfacquire
can convert a raw (dd) image into the EWF format.
.Pp
.Nm ewfacquire
is part of the
.Nm libewf
package.
.Nm libewf
is a library to access the Expert Witness Compression Format (EWF).
.Pp
.Ar source
the source file(s) or device
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl A Ar codepage
the codepage of header section, options: ascii (default), windows-874, windows-932, windows-936, windows-949, windows-950, windows-1250, windows-1251, windows-1252, windows-1253, windows-1254, windows-1255, windows-1256, windows-1257 or windows-1258
.It Fl b Ar number_of_sectors
the number of sectors to read at once (per chunk), options: 16, 32, 64 (default), 128, 256, 512, 1024, 2048, 4096, 8192, 16384 or 32768
.It Fl B Ar number_of_bytes
the number of bytes to acquire
.It Fl c Ar compression_values
specify the compression values as: level or method:level
compression method options: deflate (default), bzip2 (bzip2 is only supported by EWF2 formats)
compression level options: none (default), empty-block, fast or best
.It Fl C Ar case_number
the case number (default is case_number)
.It Fl d Ar digest_type
calculate additional digest (hash) types besides md5, options: sha1, sha256
.It Fl D Ar description
the description (default is description)
.It Fl e Ar examiner_name
the examiner name (default is examiner_name)
.It Fl E Ar evidence_number
the evidence number (default is evidence_number)
.It Fl f Ar format
the EWF file format to write to, options: ewf, smart, ftk, encase1, encase2, encase3, encase4, encase5, encase6 (default), encase7, linen5, linen6, linen7, ewfx.
.It Fl g Ar number_of_sectors
the number of sectors to be used as error granularity
.It Fl h
shows this help
.It Fl l Ar log_filename
logs acquiry errors and the digest (hash) to the log filename
.It Fl m Ar media_type
the media type, options: fixed (default), removable, optical, memory
.It Fl M Ar media_flags
the media flags, options: logical, physical (default)
.It Fl N Ar notes
the notes (default is notes)
.It Fl o Ar offset
the offset to start to acquire (default is 0)
.It Fl p Ar process_buffer_size
the process buffer size (default is the chunk size)
.It Fl P Ar bytes_per_sector
the number of bytes per sector (default is 512) (use this to override the automatic bytes per sector detection)
.It Fl q
quiet shows minimal status information
.It Fl r Ar read_error_retries
the number of retries when a read error occurs (default is 2)
.It Fl R
resume acquiry at a safe point
.It Fl s
swap byte pairs of the media data (from AB to BA) (use this for big to little endian conversion and vice versa)
.It Fl S Ar segment_file_size
the segment file size in bytes (default is 1.4 GiB) (minimum is 1.0 MiB, maximum is 7.9 EiB for encase6 and encase7 format and 1.9 GiB for other formats)
.It Fl t Ar target
the target file (without extension) to write to (default is image)
.It Fl T Ar toc_file
specify the file containing the table of contents (TOC) of an optical disc. The TOC file must be in the CUE format.
.It Fl u
unattended mode (disables user interaction)
.It Fl v
verbose output to stderr
.It Fl V
print version
.It Fl w
zero sectors on read error (mimic EnCase like behavior)
.It Fl 2 Ar secondary_target
the secondary target file (without extension) to write to
.El
.Pp
.Nm ewfacquire
will read from a file or device until it encounters a read error. On read error it will retry the number of retries specified. If
.Nm ewfacquire
still is unable to read and, if specified, it will zero (wipe) the the remainder of the number of sectors specified as error granularity. If
.Nm ewfacquire
should mimic EnCase it will zero all of sectors specified as error granularity.
.Pp
Empty block compression detects blocks of sectors with entirely the same byte data and compresses them using the default compression level.
.Pp
The encase6 and encase7 format allows for segment files greater than 2 GiB (2147483648 bytes).
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh EXAMPLES
.Nm ewfacquire
can either image devices, (split) RAW image file(s) or optical disc (split) RAW image files.
.Nm ewfacquire
will try to detect device information, but results may vary per platform.
In attended mode (default)
.Nm ewfacquire
will ask for the information it requires.
.Ss To image a floppy:
.Bd -literal
# ewfacquire /dev/fd0
ewfacquire 20120805

Device information:
Bus type:
Vendor:					Y-E DATA
Model:					USB-FDU
Serial:

Storage media information:
Type:					Device
Media size:				1.4 MB (1474560 bytes)
Bytes per sector:			512

Information about acquiry required, please provide the necessary input
Image path and filename without extension: floppy
Case number: 1
Description: Floppy
Evidence number: 1.1
Examiner name: John D.
Notes: Just a floppy in my system
Media type (fixed, removable, optical, memory) [fixed]: removable
Media characteristics (logical, physical) [logical]:
Use EWF file format (smart, ftk, encase1, encase2, encase3, encase4, encase5, encase6, encase7, linen5, linen6, linen7, ewfx) [encase6]: encase5
Compression method (deflate) [deflate]:
Compression level (none, empty-block, fast, best) [none]:
Start to acquire at offset (0 <= value <= 1474560) [0]:
The number of bytes to acquire (0 <= value <= 1474560) [1474560]:
Evidence segment file size in bytes (1.0 MiB <= value <= 1.9 GiB) [1.4 GiB]:
The number of bytes per sector (1 <= value <= 4294967295) [512]:
The number of sectors to read at once (16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768) [64]: 
The number of sectors to be used as error granularity (1 <= value <= 64) [64]: 
The number of retries when a read error occurs (0 <= value <= 255) [2]: 
Zero sectors on read error (mimic EnCase like behavior) (yes, no) [no]:

The following information was provided:
Image path and filename:		floppy.E01
Case number:				1
Description:				Floppy
Evidence number:			1.1
Examiner name:				John D.
Notes:					Just a floppy in my system
Media type:				removable
Is physical:				no
EWF file format:			Encase 5 (.E01)
Compression method:			deflate
Compression level:			none
Acquiry start offset:			0
Number of bytes to acquire:		1.4 MiB (1474560 bytes)
Evidence segment file size:		1.4 GiB (1572864000 bytes)
Bytes per sector:			512
Block size:				64 sectors
Error granularity:			64 sectors
Retries on read error:			2
Zero sectors on read error:		no

Continue acquiry with these values (yes, no) [yes]:

Acquiry started at: Sun Aug  5 11:32:41 2012

This could take a while.

Status: at 2%.
        acquired 32 kB (32768 bytes) of total 1.4 MiB (1474560 bytes).

.Dl ...

Status: at 100%.
        acquired 1.4 MiB (1474560 bytes) of total 1.4 MiB (1474560 bytes).
        completion in 1 second(s) with 1 MiB/s (1474560 bytes/second).

Acquiry completed at: Sun Aug  5 11:32:42 2012

Written: 1.4 MiB (1474560 bytes) in 1 second(s) with 1 MiB/s (1474560 bytes/second).

MD5 hash calculated over data:		ae1ce8f5ac079d3ee93f97fe3792bda3

.Ed
.Ss To convert a split RAW image into an EWF image:
.Bd -literal
# ewfacquire usb256.raw.0??
ewfacquire 20120805

Storage media information:
Type:					RAW image
Media size:				262 MB (262144000 bytes)
Bytes per sector:			512

.Dl ...

.Ed
.Ss To convert an optical disc RAW image with a table of contents file into an EWF image:
.Bd -literal
# ewfacquire -T cdrom.cue cdrom.iso
ewfacquire 20120805

Storage media information:
Type:					Optical disc RAW image
Media size:				42 MB (42885120 bytes)
Bytes per sector:			2048
Sessions:
	total number: 2
	at sector(s): 0 - 20619 number: 20620
	at sector(s): 20620 - 20939 number: 320

.Dl ...

.Ed
.Sh DIAGNOSTICS
Errors, verbose and debug output are printed to stderr when verbose output \-v is enabled. Verbose and debug output are only printed when enabled at compilation.
.Sh BUGS
Please report bugs of any kind to <joachim.metz@gmail.com> or on the project website:
http://code.google.com/p/libewf/
.Sh AUTHOR
.Pp
These man pages were written by Kees Mastwijk.
.Pp
Alterations for distribution have been made by Joachim Metz.
.Sh COPYRIGHT
.Pp
Copyright 2006-2013, Joachim Metz <joachim.metz@gmail.com>.
.Pp
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
.Xr ewfacquirestream 1 ,
.Xr ewfexport 1 ,
.Xr ewfinfo 1 ,
.Xr ewfmount 1 ,
.Xr ewfrecover 1 ,
.Xr ewfverify 1
